from flask import Flask, jsonify, send_file
import json
import os
import subprocess
import threading

app = Flask(__name__)

# ✅ Local File Paths
TEST_CASES_FILE = "test_cases.json"       # Test case file (local)
SELENIUM_SCRIPT_FILE = "test_runner.py"   # Selenium script file (local)
REPORT_FILE = "report.json"               # Report output file

test_status = False

@app.route("/testing" , methods = ["GET"])
def testing():
    return jsonify( {"rah" : " eaj"})


# ✅ Trigger Selenium Tests
def run_tests():
    global test_status

    # ✅ Check if the Selenium script exists
    if not os.path.exists(SELENIUM_SCRIPT_FILE):
        print("❌ Selenium script not found locally.")
        test_status = False
        return

    try:
        print("\n🔥 Running External Selenium Script...")

        # ✅ Run the Selenium script with UTF-8 encoding
        result = subprocess.run(
            ["python", SELENIUM_SCRIPT_FILE],
            capture_output=True,
            text=True,
            encoding='utf-8'  # Force UTF-8 encoding
        )

        # ✅ Display the output of the Selenium script
        print("\n🔥 Selenium Output:")
        print(result.stdout)
        print("\n❌ Selenium Errors (if any):")
        print(result.stderr)

        # ✅ Check if the script execution was successful
        if result.returncode == 0:
            print("✅ Selenium script executed successfully.")
        else:
            print("❌ Selenium script failed with errors.")

        # ✅ Load and process the report.json
        if os.path.exists(REPORT_FILE):
            with open(REPORT_FILE, "r", encoding="utf-8") as f:
                report = json.load(f)

            print("\n🚀 Test Execution Completed.")
            print(json.dumps(report, indent=4))

            # ✅ Determine final test status
            total_tests = report.get("total_tests", 0)
            passed = report.get("passed", 0)

            # If all tests passed, set status to true
            test_status = (total_tests == passed)

        else:
            print("❌ No report generated by the external Selenium script.")
            test_status = False

    except Exception as e:
        print(f"❌ Exception occurred: {str(e)}")
        test_status = False


# 🔥 Automatically run tests when the server starts
def run_tests_on_startup():
    print("\n🚀 Automatically triggering tests on server startup...")
    run_tests()


# 🔥 Endpoint to trigger tests (manual trigger)
@app.route('/run-tests', methods=['GET'])
def trigger_tests():
    run_tests()
    return jsonify({"message": "Test execution completed. Check the report."})


# 🔥 Simplified `/test-status` endpoint → Only sends `true` or `false`
@app.route('/test-status', methods=['GET'])
def get_test_status():
    run_tests()
    if os.path.exists(REPORT_FILE):
        with open(REPORT_FILE, "r", encoding="utf-8") as f:
            report = json.load(f)

        total_tests = report.get("total_tests", 0)
        passed = report.get("passed", 0)

        # ✅ Only return status: true or false
        status = total_tests == passed
        return jsonify({"status": status})

    return jsonify({"status": False})


# 🔥 Endpoint to serve the test report file
@app.route('/report', methods=['GET'])
def get_report():
    if os.path.exists(REPORT_FILE):
        return send_file(REPORT_FILE, as_attachment=True)
    return jsonify({"error": "Report not found"}), 404




if __name__ == '__main__':
    # 🔥 Start the server with tests running in a separate thread
    # threading.Thread(target=run_tests_on_startup).start()
    app.run(debug=True, port=5000)
